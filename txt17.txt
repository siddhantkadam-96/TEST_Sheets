=== ShimChecker Test Results ===
Timestamp: 2025-09-22 14:32:23
==================================================

Function: dataframe_nrow
Description: Get number of rows in DataFrame
------------------------------
Input: {'data': {'name': ['Alice', 'Bob', 'Charlie'], 'age': [25, 30, 35], 'city': ['NY', 'LA', 'SF']}}
Julia Output: {"status":"success","result":3}
Rust Output: {"result":3,"status":"success"}
Status: ✅ MATCH
Difference: 0

Input: {'data': {'x': [1, 2], 'y': [3, 4]}}
Julia Output: {"status":"success","result":2}
Rust Output: {"result":2,"status":"success"}
Status: ✅ MATCH
Difference: 0

Input: {'data': {}}
Julia Output: {"status":"success","result":0}
Rust Output: {"result":0,"status":"success"}
Status: ✅ MATCH
Difference: 0


Function: dataframe_ncol
Description: Get number of columns in DataFrame
------------------------------
Input: {'data': {'name': ['Alice', 'Bob', 'Charlie'], 'age': [25, 30, 35], 'city': ['NY', 'LA', 'SF']}}
Julia Output: {"status":"success","result":3}
Rust Output: {"result":3,"status":"success"}
Status: ✅ MATCH
Difference: 0

Input: {'data': {'x': [1, 2], 'y': [3, 4]}}
Julia Output: {"status":"success","result":2}
Rust Output: {"result":2,"status":"success"}
Status: ✅ MATCH
Difference: 0

Input: {'data': {}}
Julia Output: {"status":"success","result":0}
Rust Output: {"result":0,"status":"success"}
Status: ✅ MATCH
Difference: 0


Function: dataframe_names
Description: Get column names of DataFrame
------------------------------
Input: {'data': {'name': ['Alice', 'Bob'], 'age': [25, 30], 'city': ['NY', 'LA']}}
Julia Output: {"status":"success","result":["age","city","name"]}
Rust Output: {"result":["age","city","name"],"status":"success"}
Status: ✅ MATCH

Input: {'data': {'x': [1], 'y': [2], 'z': [3]}}
Julia Output: {"status":"success","result":["x","y","z"]}
Rust Output: {"result":["x","y","z"],"status":"success"}
Status: ✅ MATCH


Function: dataframe_describe
Description: Get descriptive statistics of DataFrame
------------------------------
Input: {'data': {'age': [25, 30, 35, 40], 'score': [85.5, 92.0, 78.5, 88.0]}}
Julia Output: {"status":"success","result":{"score":{"max":92.0,"min":78.5,"count":4,"mean":86.0,"std":5.671566509057851},"age":{"max":40,"min":25,"count":4,"mean":32.5,"std":6.454972243679028}}}
Rust Output: {"result":{"age":{"count":4,"max":40.0,"mean":32.5,"min":25.0,"std":6.454972243679028},"score":{"count":4,"max":92.0,"mean":86.0,"min":78.5,"std":5.671566509057851}},"status":"success"}
Status: ✅ MATCH

Input: {'data': {'x': [1, 2, 3], 'y': [10, 20, 30]}}
Julia Output: {"status":"success","result":{"x":{"max":3,"min":1,"count":3,"mean":2.0,"std":1.0},"y":{"max":30,"min":10,"count":3,"mean":20.0,"std":10.0}}}
Rust Output: {"result":{"x":{"count":3,"max":3.0,"mean":2.0,"min":1.0,"std":1.0},"y":{"count":3,"max":30.0,"mean":20.0,"min":10.0,"std":10.0}},"status":"success"}
Status: ✅ MATCH


Function: dataframe_groupby
Description: Group DataFrame by column and count
------------------------------
Input: {'data': {'category': ['A', 'B', 'A', 'C', 'B'], 'value': [10, 20, 30, 40, 50]}, 'group_column': 'category'}
Julia Output: {"status":"success","result":{"groups":[{"key":"A","count":2},{"key":"B","count":2},{"key":"C","count":1}]}}
Rust Output: {"result":{"groups":[{"count":2,"key":"A"},{"count":1,"key":"C"},{"count":2,"key":"B"}]},"status":"success"}
Status: ✅ MATCH

Input: {'data': {'department': ['Engineering', 'Sales', 'Engineering', 'Marketing'], 'salary': [75000, 60000, 80000, 55000]}, 'group_column': 'department'}
Julia Output: {"status":"success","result":{"groups":[{"key":"Engineering","count":2},{"key":"Sales","count":1},{"key":"Marketing","count":1}]}}
Rust Output: {"result":{"groups":[{"count":2,"key":"Engineering"},{"count":1,"key":"Sales"},{"count":1,"key":"Marketing"}]},"status":"success"}
Status: ✅ MATCH


Function: dataframe_combine
Description: Combine DataFrame groups using aggregation
------------------------------
Input: {'data': {'category': ['A', 'B', 'A', 'C', 'B'], 'value': [10, 20, 30, 40, 50]}, 'group_column': 'category', 'agg_column': 'value', 'operation': 'sum'}
Julia Output: {"status":"success","result":{"value_sum":[40,70,40],"category":["A","B","C"]}}
Rust Output: {"result":{"category":["C","B","A"],"value_sum":[40.0,70.0,40.0]},"status":"success"}
Status: ❌ MISMATCH

Input: {'data': {'department': ['Engineering', 'Sales', 'Engineering'], 'salary': [75000, 60000, 80000]}, 'group_column': 'department', 'agg_column': 'salary', 'operation': 'mean'}
Julia Output: {"status":"success","result":{"salary_mean":[77500.0,60000.0],"department":["Engineering","Sales"]}}
Rust Output: {"result":{"department":["Engineering","Sales"],"salary_mean":[77500.0,60000.0]},"status":"success"}
Status: ✅ MATCH


Function: dataframe_select
Description: Select specific columns from DataFrame
------------------------------
Input: {'data': {'name': ['Alice', 'Bob', 'Charlie'], 'age': [25, 30, 35], 'city': ['NY', 'LA', 'SF']}, 'columns': ['name', 'age']}
Julia Output: {"status":"success","result":{"name":["Alice","Bob","Charlie"],"age":[25,30,35]}}
Rust Output: {"result":{"age":[25.0,30.0,35.0],"name":["Alice","Bob","Charlie"]},"status":"success"}
Status: ❌ MISMATCH

Input: {'data': {'x': [1, 2, 3], 'y': [4, 5, 6], 'z': [7, 8, 9]}, 'columns': ['x', 'z']}
Julia Output: {"status":"success","result":{"x":[1,2,3],"z":[7,8,9]}}
Rust Output: {"result":{"x":[1.0,2.0,3.0],"z":[7.0,8.0,9.0]},"status":"success"}
Status: ❌ MISMATCH


Function: dataframe_filter
Description: Filter DataFrame rows based on condition
------------------------------
Input: {'data': {'name': ['Alice', 'Bob', 'Charlie'], 'age': [25, 30, 35], 'salary': [50000, 60000, 70000]}, 'filter_column': 'age', 'operator': '>', 'value': 28}
Julia Output: {"status":"success","result":{"name":["Bob","Charlie"],"salary":[60000,70000],"age":[30,35]}}
Rust Output: {"result":{"age":[30.0,35.0],"name":["Bob","Charlie"],"salary":[60000.0,70000.0]},"status":"success"}
Status: ❌ MISMATCH

Input: {'data': {'product': ['A', 'B', 'C', 'D'], 'price': [10, 25, 15, 30]}, 'filter_column': 'price', 'operator': '>=', 'value': 20}
Julia Output: {"status":"success","result":{"price":[25,30],"product":["B","D"]}}
Rust Output: {"result":{"price":[25.0,30.0],"product":["B","D"]},"status":"success"}
Status: ❌ MISMATCH


Function: dataframe_transform
Description: Transform DataFrame by adding computed columns
------------------------------
Input: {'data': {'name': ['Alice', 'Bob', 'Charlie'], 'salary': [50000, 60000, 70000]}, 'source_column': 'salary', 'operation': 'multiply', 'value': 1.1, 'new_column': 'salary_increased'}
Julia Output: {"status":"success","result":{"name":["Alice","Bob","Charlie"],"salary_increased":[55000.00000000001,66000.0,77000.0],"salary":[50000,60000,70000]}}
Rust Output: {"result":{"name":["Alice","Bob","Charlie"],"salary":[50000.0,60000.0,70000.0],"salary_increased":[55000.00000000001,66000.0,77000.0]},"status":"success"}
Status: ❌ MISMATCH

Input: {'data': {'x': [1, 2, 3], 'y': [4, 5, 6]}, 'source_column': 'x', 'operation': 'square', 'new_column': 'x_squared'}
Julia Output: {"status":"success","result":{"x_squared":[1,4,9],"x":[1,2,3],"y":[4,5,6]}}
Rust Output: {"result":{"x":[1.0,2.0,3.0],"x_squared":[1.0,4.0,9.0],"y":[4.0,5.0,6.0]},"status":"success"}
Status: ❌ MISMATCH


Function: dataframe_sort
Description: Sort DataFrame by column values
------------------------------
Input: {'data': {'name': ['Charlie', 'Alice', 'Bob'], 'age': [35, 25, 30], 'salary': [70000, 50000, 60000]}, 'sort_column': 'age', 'ascending': True}
Julia Output: {"status":"success","result":{"name":["Alice","Bob","Charlie"],"salary":[50000,60000,70000],"age":[25,30,35]}}
Rust Output: {"result":{"age":[25.0,30.0,35.0],"name":["Alice","Bob","Charlie"],"salary":[50000.0,60000.0,70000.0]},"status":"success"}
Status: ❌ MISMATCH

Input: {'data': {'product': ['B', 'A', 'D', 'C'], 'price': [25, 10, 30, 15]}, 'sort_column': 'price', 'ascending': False}
Julia Output: {"status":"success","result":{"price":[30,25,15,10],"product":["D","B","C","A"]}}
Rust Output: {"result":{"price":[30.0,25.0,15.0,10.0],"product":["D","B","C","A"]},"status":"success"}
Status: ❌ MISMATCH


==================================================
SUMMARY
==================================================
Total Tests: 22
Passed: 13
Failed: 9
Success Rate: 59.1%
